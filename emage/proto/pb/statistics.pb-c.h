/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: statistics.proto */

#ifndef PROTOBUF_C_statistics_2eproto__INCLUDED
#define PROTOBUF_C_statistics_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Statistics Statistics;
typedef struct _RrcMeasurementsReply RrcMeasurementsReply;
typedef struct _RrcMeasurements RrcMeasurements;
typedef struct _NeighCellsMeasurements NeighCellsMeasurements;
typedef struct _EUTRAMeasurements EUTRAMeasurements;
typedef struct _EUTRACgiMeasurements EUTRACgiMeasurements;
typedef struct _PlmnIdentity PlmnIdentity;
typedef struct _CellGlobalIdEUTRA CellGlobalIdEUTRA;
typedef struct _EUTRARefSignalMeas EUTRARefSignalMeas;
typedef struct _RrcMeasurementsRequest RrcMeasurementsRequest;
typedef struct _RrcMeasurementsRequestConfig RrcMeasurementsRequestConfig;
typedef struct _L2StatisticsReply L2StatisticsReply;
typedef struct _CellStatisticsReport CellStatisticsReport;
typedef struct _NoiseInterferenceReport NoiseInterferenceReport;
typedef struct _UeStatisticsReport UeStatisticsReport;
typedef struct _RlcBsrReport RlcBsrReport;
typedef struct _DlCqiReport DlCqiReport;
typedef struct _DlCsiReport DlCsiReport;
typedef struct _CsiP10 CsiP10;
typedef struct _CsiP11 CsiP11;
typedef struct _CsiP20 CsiP20;
typedef struct _CsiP21 CsiP21;
typedef struct _CsiA12 CsiA12;
typedef struct _CsiA22 CsiA22;
typedef struct _CsiA20 CsiA20;
typedef struct _CsiA30 CsiA30;
typedef struct _CsiA31 CsiA31;
typedef struct _MsbCqi MsbCqi;
typedef struct _PagingInfo PagingInfo;
typedef struct _PagingBufferReport PagingBufferReport;
typedef struct _UlCqi UlCqi;
typedef struct _UlCqiReport UlCqiReport;
typedef struct _L2StatisticsRequest L2StatisticsRequest;
typedef struct _CompleteStatisticsRequest CompleteStatisticsRequest;
typedef struct _CellStatisticsRequest CellStatisticsRequest;
typedef struct _UeStatisticsRequest UeStatisticsRequest;


/* --- enums --- */

/*
 * Types of statistics related messages requested by the controller.
 */
typedef enum _StatsMsgType {
  /*
   * Layer 2 statistics request.
   */
  STATS_MSG_TYPE__L2_STATISTICS_REQUEST = 0,
  /*
   * Layer 2 statistics reply.
   */
  STATS_MSG_TYPE__L2_STATISTICS_REPLY = 1,
  /*
   * RRC measurements request.
   */
  STATS_MSG_TYPE__RRC_MEASUREMENTS_REQUEST = 2,
  /*
   * RRC measurements reply.
   */
  STATS_MSG_TYPE__RRC_MEASUREMENTS_REPLY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STATS_MSG_TYPE)
} StatsMsgType;
/*
 * Flags for MAC Control Elements (CE).
 */
typedef enum _MacCeType {
  /*
   * Timing Advance.
   */
  MAC_CE_TYPE__MCET_TA = 1,
  /*
   * Discontinuous reception.
   */
  MAC_CE_TYPE__MCET_DRX = 2,
  /*
   * (Need to look up in spec).
   */
  MAC_CE_TYPE__MCET_CR = 4,
  /*
   * (Need to look up in spec).
   */
  MAC_CE_TYPE__MCET_CA = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MAC_CE_TYPE)
} MacCeType;
/*
 * Types of UL CQI reports.
 */
typedef enum _UlCqiType {
  /*
   * Sounding Reference Signal.
   */
  UL_CQI_TYPE__ULCT_SRS = 0,
  /*
   * Physical Uplink Shared Channel.
   */
  UL_CQI_TYPE__ULCT_PUSCH = 1,
  /*
   * Physical Uplink Control Channel 1.
   */
  UL_CQI_TYPE__ULCT_PUCCH_1 = 2,
  /*
   * Physical Uplink Control Channel 2.
   */
  UL_CQI_TYPE__ULCT_PUCCH_2 = 3,
  /*
   * Physical Random Access Channel.
   */
  UL_CQI_TYPE__ULCT_PRACH = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(UL_CQI_TYPE)
} UlCqiType;
/*
 * Types of DL (Downlink) CSI reports. (To do: Need to document after going 
 * through 3GPP specification)
 */
typedef enum _CsiType {
  CSI_TYPE__CSIT_P10 = 0,
  CSI_TYPE__CSIT_P11 = 1,
  CSI_TYPE__CSIT_P20 = 2,
  CSI_TYPE__CSIT_P21 = 3,
  CSI_TYPE__CSIT_A12 = 4,
  CSI_TYPE__CSIT_A22 = 5,
  CSI_TYPE__CSIT_A20 = 6,
  CSI_TYPE__CSIT_A30 = 7,
  CSI_TYPE__CSIT_A31 = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CSI_TYPE)
} CsiType;
/*
 * Types of Layer 2 statistics requested by the controller.
 */
typedef enum _L2StatsType {
  /*
   * Both cell and UE related statistics.
   */
  L2_STATS_TYPE__L2ST_COMPLETE = 0,
  /*
   * Base station cell related statistics.
   */
  L2_STATS_TYPE__L2ST_CELL = 1,
  /*
   * UE related statistics.
   */
  L2_STATS_TYPE__L2ST_UE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(L2_STATS_TYPE)
} L2StatsType;
/*
 * Report frequency for the requested statistics.
 */
typedef enum _ReportingFrequency {
  /*
   * Report only once.
   */
  REPORTING_FREQUENCY__REPF_ONCE = 0,
  /*
   * Report periodically.
   */
  REPORTING_FREQUENCY__REPF_PERIODICAL = 1,
  /*
   * Report continuously one after another.
   */
  REPORTING_FREQUENCY__REPF_CONTINUOUS = 2,
  /*
   * Turn-off periodical and/or continuous reporting.
   */
  REPORTING_FREQUENCY__REPF_OFF = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REPORTING_FREQUENCY)
} ReportingFrequency;
/*
 * Reporting flags for cell statistics.
 */
typedef enum _CellStatsType {
  /*
   * Noise interference report of the cell.
   */
  CELL_STATS_TYPE__CST_NOISE_INTERFERENCE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CELL_STATS_TYPE)
} CellStatsType;
/*
 * Reporting flags for UE-related statistics.
 */
typedef enum _UeStatsType {
  /*
   * Buffer Status Report.
   */
  UE_STATS_TYPE__UEST_BSR = 1,
  /*
   * Power Headroom report.
   */
  UE_STATS_TYPE__UEST_PRH = 2,
  /*
   * RLC (Radio Link Control) Buffer Status report.
   */
  UE_STATS_TYPE__UEST_RLC_BS = 4,
  /*
   * MAC (Media Access Control) Control Elements Buffer Status report.
   */
  UE_STATS_TYPE__UEST_MAC_CE_BS = 8,
  /*
   * Downlink Channel Quality Indicator report.
   */
  UE_STATS_TYPE__UEST_DL_CQI = 16,
  /*
   * Paging Buffer Status report.
   */
  UE_STATS_TYPE__UEST_PBS = 32,
  /*
   * Uplink Channel Quality Indicator report.
   */
  /*
   * To be extended with more types of stats.
   */
  UE_STATS_TYPE__UEST_UL_CQI = 64
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(UE_STATS_TYPE)
} UeStatsType;

/* --- messages --- */

typedef enum {
  STATISTICS__STATS_MSG__NOT_SET = 0,
  STATISTICS__STATS_MSG_L2_STATS_REQ = 1,
  STATISTICS__STATS_MSG_L2_STATS_REPL = 2,
  STATISTICS__STATS_MSG_RRC_MEAS_REQ = 3,
  STATISTICS__STATS_MSG_RRC_MEAS_REPL = 4,
} Statistics__StatsMsgCase;

/*
 * Common statistics message to identify the type of statistics.
 */
struct  _Statistics
{
  ProtobufCMessage base;
  /*
   * Type of 2nd level message.
   */
  protobuf_c_boolean has_type;
  StatsMsgType type;
  Statistics__StatsMsgCase stats_msg_case;
  union {
    /*
     * Request message for Layer 2 statistics.
     */
    L2StatisticsRequest *l2_stats_req;
    /*
     * Reply message for Layer 2 statistics request.
     */
    L2StatisticsReply *l2_stats_repl;
    /*
     * Request message for RRC measurements.
     */
    RrcMeasurementsRequest *rrc_meas_req;
    /*
     * Reply message with RRC measurements.
     */
    RrcMeasurementsReply *rrc_meas_repl;
  };
};
#define STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&statistics__descriptor) \
    , 0,0, STATISTICS__STATS_MSG__NOT_SET, {0} }


/*
 * Message definition for RRC measurements reply.
 */
struct  _RrcMeasurementsReply
{
  ProtobufCMessage base;
  /*
   * Radio Network Temporary Identifier (RNTI) of UE.
   */
  protobuf_c_boolean has_rnti;
  uint32_t rnti;
  /*
   * RRC measurements performed by UE.
   */
  RrcMeasurements *measurements;
};
#define RRC_MEASUREMENTS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rrc_measurements_reply__descriptor) \
    , 0,0, NULL }


/*
 * Message definition for RRC measurements.
 */
struct  _RrcMeasurements
{
  ProtobufCMessage base;
  /*
   * Measurement identifier.
   */
  protobuf_c_boolean has_measid;
  int32_t measid;
  /*
   * Primary Cell Reference Signal Received Power (RSRP).
   */
  protobuf_c_boolean has_pcell_rsrp;
  int32_t pcell_rsrp;
  /*
   * Primary Cell Reference Signal Received Quality (RSRQ).
   */
  protobuf_c_boolean has_pcell_rsrq;
  int32_t pcell_rsrq;
  /*
   * Neighboring cells measurements performed by UE.
   */
  NeighCellsMeasurements *neigh_meas;
};
#define RRC_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rrc_measurements__descriptor) \
    , 0,0, 0,0, 0,0, NULL }


/*
 * Message definition for neighboring cell measurements.
 */
struct  _NeighCellsMeasurements
{
  ProtobufCMessage base;
  /*
   * Neighboring EUTRA cells measurements.
   */
  /*
   *repeated UTRA_measurements UTRA_meas = 2;
   *repeated GERAN_measurements GERAN_meas = 3;
   *repeated CDMA2000_measurements CDMA2000_meas = 4;
   * For now only EUTRAN measurements are supported
   */
  size_t n_eutra_meas;
  EUTRAMeasurements **eutra_meas;
};
#define NEIGH_CELLS_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&neigh_cells_measurements__descriptor) \
    , 0,NULL }


/*
 * Message definition for neighboring EUTRA cell measurements.
 */
struct  _EUTRAMeasurements
{
  ProtobufCMessage base;
  /*
   * Physical Cell identifier.
   */
  protobuf_c_boolean has_phys_cell_id;
  int32_t phys_cell_id;
  /*
   * EUTRA Cell Global Identity (CGI) measurement.
   */
  EUTRACgiMeasurements *cgi_meas;
  /*
   * EUTRA nearby cell reference signal measurement.
   */
  EUTRARefSignalMeas *meas_result;
};
#define EUTRA_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eutra_measurements__descriptor) \
    , 0,0, NULL, NULL }


/*
 * Message definition for neighboring EUTRA cell CGI
 * measurements.
 */
struct  _EUTRACgiMeasurements
{
  ProtobufCMessage base;
  /*
   * EUTRA Cell Global Identity (CGI).
   */
  CellGlobalIdEUTRA *cgi;
  /*
   * Tracking area code of the neighbor cell.
   */
  protobuf_c_boolean has_tracking_area_code;
  uint32_t tracking_area_code;
  /*
   * Public land mobile network identifiers of neighbor cell.
   */
  size_t n_plmn_id;
  PlmnIdentity **plmn_id;
};
#define EUTRA_CGI_MEASUREMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eutra_cgi_measurements__descriptor) \
    , NULL, 0,0, 0,NULL }


/*
 * Message definition for Public land mobile network identifier.
 */
struct  _PlmnIdentity
{
  ProtobufCMessage base;
  /*
   * Mobile Network Code (MNC).
   */
  size_t n_mnc;
  uint32_t *mnc;
  /*
   * Mobile Country Code (MCC).
   */
  size_t n_mcc;
  uint32_t *mcc;
};
#define PLMN_IDENTITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plmn_identity__descriptor) \
    , 0,NULL, 0,NULL }


/*
 * Message definition for EUTRA Cell Global Identity.
 */
struct  _CellGlobalIdEUTRA
{
  ProtobufCMessage base;
  /*
   * Public land mobile network identifier of neighbor cell.
   */
  PlmnIdentity *plmn_id;
  /*
   * Cell identifier of neighbor cell.
   */
  protobuf_c_boolean has_cell_id;
  uint32_t cell_id;
};
#define CELL_GLOBAL_ID__EUTRA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cell_global_id__eutra__descriptor) \
    , NULL, 0,0 }


/*
 * Message definition for neighboring EUTRA cell reference signal measurements.
 */
struct  _EUTRARefSignalMeas
{
  ProtobufCMessage base;
  /*
   * Neighboring Cell Reference Signal Received Power (RSRP).
   */
  protobuf_c_boolean has_rsrp;
  int32_t rsrp;
  /*
   * Neighboring Cell Reference Signal Received Quality (RSRQ).
   */
  /*
   * some more extensions for release 9 (to be added later) 
   */
  protobuf_c_boolean has_rsrq;
  int32_t rsrq;
};
#define EUTRA_REF_SIGNAL_MEAS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eutra_ref_signal_meas__descriptor) \
    , 0,0, 0,0 }


/*
 * Message definition for RRC measurements request.
 */
struct  _RrcMeasurementsRequest
{
  ProtobufCMessage base;
  /*
   * Radio Network Temporary Identifier (RNTI) of UE.
   */
  protobuf_c_boolean has_rnti;
  uint32_t rnti;
  /*
   * Configuration of RRC measurements to be performed by UE.
   */
  RrcMeasurementsRequestConfig *config;
};
#define RRC_MEASUREMENTS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rrc_measurements_request__descriptor) \
    , 0,0, NULL }


/*
 * Message definition for configuration of RRC measurements request.
 */
struct  _RrcMeasurementsRequestConfig
{
  ProtobufCMessage base;
  /*
   * The reporting interval parameter for Report Configurations 
   * for periodical measurements.
   */
  protobuf_c_boolean has_report_interval;
  uint32_t report_interval;
  /*
   * Carrier frequency on which measurements should be carried out.
   */
  protobuf_c_boolean has_report_carrier_freq;
  uint32_t report_carrier_freq;
};
#define RRC_MEASUREMENTS_REQUEST_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rrc_measurements_request_config__descriptor) \
    , 0,0, 0,0 }


/*
 * Message definition for Layer 2 statistics reports.
 */
struct  _L2StatisticsReply
{
  ProtobufCMessage base;
  /*
   * List of UE related statistics for all UEs requested in request.
   */
  size_t n_ue_report;
  UeStatisticsReport **ue_report;
  /*
   * List of cell related statistics for all cells requested in request.
   */
  size_t n_cell_report;
  CellStatisticsReport **cell_report;
};
#define L2_STATISTICS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&l2_statistics_reply__descriptor) \
    , 0,NULL, 0,NULL }


/*
 * Message definition for cell related Layer 2 statistics report per CC.
 */
struct  _CellStatisticsReport
{
  ProtobufCMessage base;
  /*
   * Component Carrier (CC) id.
   */
  protobuf_c_boolean has_cc_id;
  uint32_t cc_id;
  /*
   * Types of cell related l2 statistics to include in final report.
   * This field is a bitmask which holds the values in cell_stats_type.
   */
  protobuf_c_boolean has_report_flags;
  uint32_t report_flags;
  /*
   * Noise interference statistics in a particular component carrier.
   */
  NoiseInterferenceReport *noise_interf;
};
#define CELL_STATISTICS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cell_statistics_report__descriptor) \
    , 0,0, 0,0, NULL }


/*
 * Message definition for UL noise and interference report faced by UE.
 */
struct  _NoiseInterferenceReport
{
  ProtobufCMessage base;
  /*
   * Current frame and subframe number.
   * System Frame Number (SFN) * Subframe number.
   */
  protobuf_c_boolean has_sfn_sf;
  uint32_t sfn_sf;
  /*
   * Received interference power in dbm
   */
  protobuf_c_boolean has_rip;
  uint32_t rip;
  /*
   * Thermal noise power in dbm
   */
  protobuf_c_boolean has_tnp;
  uint32_t tnp;
};
#define NOISE_INTERFERENCE_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&noise_interference_report__descriptor) \
    , 0,0, 0,0, 0,0 }


/*
 * Message definition for UE related Layer 2 statistics report per UE.
 */
struct  _UeStatisticsReport
{
  ProtobufCMessage base;
  /*
   * Radio Network Temporary Identifier (RNTI) of UE.
   */
  protobuf_c_boolean has_rnti;
  uint32_t rnti;
  /*
   * Types of UE related l2 statistics to include in final report.
   * This field is a bitmask which holds the values in ue_stats_type.
   */
  protobuf_c_boolean has_report_flags;
  uint32_t report_flags;
  /*
   * Buffer Status Report for each logical channel of the UE.
   */
  size_t n_bsr;
  uint32_t *bsr;
  /*
   * Power Headroom report.
   */
  protobuf_c_boolean has_phr;
  uint32_t phr;
  /*
   * RLC (Radio Link Control) Buffer Status reports
   * for each logical channel of the UE.
   */
  size_t n_rlc_bsr;
  RlcBsrReport **rlc_bsr;
  /*
   * MAC (Media Access Control) Control Elements Buffer Status report.
   * Bitmap of "mac_ce_type"
   */
  protobuf_c_boolean has_pending_mac_ces;
  uint32_t pending_mac_ces;
  /*
   * Downlink Channel Quality Indicator report.
   */
  DlCqiReport *dl_cqi;
  /*
   * Paging Buffer Status report.
   */
  PagingBufferReport *pbr;
  /*
   * Uplink Channel Quality Indicator report.
   */
  UlCqiReport *ul_cqi;
};
#define UE_STATISTICS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ue_statistics_report__descriptor) \
    , 0,0, 0,0, 0,NULL, 0,0, 0,NULL, 0,0, NULL, NULL, NULL }


/*
 * Message definition for RLC (Radio Link Control) buffer status for a specific 
 * logical channel of a UE.
 *  
 */
struct  _RlcBsrReport
{
  ProtobufCMessage base;
  /*
   * Logical channel id.
   */
  protobuf_c_boolean has_lc_id;
  uint32_t lc_id;
  /*
   * Transmission queue size in bytes.
   */
  protobuf_c_boolean has_tx_queue_size;
  uint32_t tx_queue_size;
  /*
   * Transmission queue head of line delay in ms.
   */
  protobuf_c_boolean has_tx_queue_hol_delay;
  uint32_t tx_queue_hol_delay;
  /*
   * Retransmission queue size in bytes.
   */
  protobuf_c_boolean has_retransmission_queue_size;
  uint32_t retransmission_queue_size;
  /*
   * Retransmission queue head of line delay in ms.
   */
  protobuf_c_boolean has_retransmission_queue_hol_delay;
  uint32_t retransmission_queue_hol_delay;
  /*
   * Current size of the pending message in bytes.
   */
  protobuf_c_boolean has_status_pdu_size;
  uint32_t status_pdu_size;
};
#define RLC_BSR_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rlc_bsr_report__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * Message definition for full DL CQI report for all CC of a UE.
 */
struct  _DlCqiReport
{
  ProtobufCMessage base;
  /*
   * Current frame and subframe number.
   * System Frame Number (SFN) * Subframe number.
   */
  protobuf_c_boolean has_sfn_sn;
  uint32_t sfn_sn;
  /*
   * Channel State Information (CSI).
   * CSI reports of a UE for all serving cell indexes.
   */
  size_t n_dl_csi;
  DlCsiReport **dl_csi;
};
#define DL_CQI_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dl_cqi_report__descriptor) \
    , 0,0, 0,NULL }


typedef enum {
  DL_CSI_REPORT__REPORT__NOT_SET = 0,
  DL_CSI_REPORT__REPORT_P10CSI = 4,
  DL_CSI_REPORT__REPORT_P11CSI = 5,
  DL_CSI_REPORT__REPORT_P20CSI = 6,
  DL_CSI_REPORT__REPORT_P21CSI = 7,
  DL_CSI_REPORT__REPORT_A12CSI = 8,
  DL_CSI_REPORT__REPORT_A22CSI = 9,
  DL_CSI_REPORT__REPORT_A20CSI = 10,
  DL_CSI_REPORT__REPORT_A30CSI = 11,
  DL_CSI_REPORT__REPORT_A31CSI = 12,
} DlCsiReport__ReportCase;

/*
 * Message definition for Channel State Information (CSI) report of a UE 
 * for a specific serving cell index.
 */
struct  _DlCsiReport
{
  ProtobufCMessage base;
  /*
   * Serving cell index.
   */
  protobuf_c_boolean has_serv_cell_index;
  uint32_t serv_cell_index;
  /*
   * Rank Indicator.
   */
  protobuf_c_boolean has_ri;
  uint32_t ri;
  /*
   * Types of DL (Downlink) CSI report.
   */
  protobuf_c_boolean has_type;
  CsiType type;
  DlCsiReport__ReportCase report_case;
  union {
    CsiP10 *p10csi;
    CsiP11 *p11csi;
    CsiP20 *p20csi;
    CsiP21 *p21csi;
    CsiA12 *a12csi;
    CsiA22 *a22csi;
    CsiA20 *a20csi;
    CsiA30 *a30csi;
    CsiA31 *a31csi;
  };
};
#define DL_CSI_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dl_csi_report__descriptor) \
    , 0,0, 0,0, 0,0, DL_CSI_REPORT__REPORT__NOT_SET, {0} }


/*
 * Message definition for CSI type P10.
 */
struct  _CsiP10
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Qquality Indicator.
   */
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
};
#define CSI_P10__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_p10__descriptor) \
    , 0,0 }


/*
 * Message definition for CSI type P11.
 */
struct  _CsiP11
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  /*
   * Wideband Precoding Matrix Indicator.
   */
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
};
#define CSI_P11__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_p11__descriptor) \
    , 0,NULL, 0,0 }


/*
 * Message definition for CSI type P20.
 */
struct  _CsiP20
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
  /*
   * Subband Channel Quality Indicator.
   */
  protobuf_c_boolean has_sb_cqi;
  uint32_t sb_cqi;
  /*
   * Bandwidth part index.
   */
  protobuf_c_boolean has_bandwidth_part_index;
  uint32_t bandwidth_part_index;
  /*
   * Subband index.
   */
  protobuf_c_boolean has_sb_index;
  uint32_t sb_index;
};
#define CSI_P20__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_p20__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * Message definition for CSI type P21.
 */
struct  _CsiP21
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  /*
   * Wideband Precoding Matrix Indicator.
   */
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
  /*
   * Subband Channel Quality Indicator.
   */
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
  /*
   * Bandwidth part index.
   */
  protobuf_c_boolean has_badwidth_part_index;
  uint32_t badwidth_part_index;
  /*
   * Subband index.
   */
  protobuf_c_boolean has_sb_index;
  uint32_t sb_index;
};
#define CSI_P21__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_p21__descriptor) \
    , 0,NULL, 0,0, 0,NULL, 0,0, 0,0 }


/*
 * Message definition for CSI type A12.
 */
struct  _CsiA12
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  /*
   * Subband Precoding Matrix Indicator.
   */
  size_t n_sb_pmi;
  uint32_t *sb_pmi;
};
#define CSI_A12__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_a12__descriptor) \
    , 0,NULL, 0,NULL }


/*
 * Message definition for CSI type A22.
 */
struct  _CsiA22
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  /*
   * Subband Channel Quality Indicator.
   */
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
  /*
   * Wideband Precoding Matrix Indicator.
   */
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
  /*
   * Subband Precoding Matrix Indicator.
   */
  protobuf_c_boolean has_sb_pmi;
  uint32_t sb_pmi;
  /*
   * List of Subbands.
   */
  size_t n_sb_list;
  uint32_t *sb_list;
};
#define CSI_A22__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_a22__descriptor) \
    , 0,NULL, 0,NULL, 0,0, 0,0, 0,NULL }


/*
 * Message definition for CSI type A20.
 */
struct  _CsiA20
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
  /*
   * Subband Channel Quality Indicator.
   */
  protobuf_c_boolean has_sb_cqi;
  uint32_t sb_cqi;
  /*
   * List of Subbands.
   */
  size_t n_sb_list;
  uint32_t *sb_list;
};
#define CSI_A20__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_a20__descriptor) \
    , 0,0, 0,0, 0,NULL }


/*
 * Message definition for CSI type A30.
 */
struct  _CsiA30
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  protobuf_c_boolean has_wb_cqi;
  uint32_t wb_cqi;
  /*
   * Subband Channel Quality Indicator.
   */
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
};
#define CSI_A30__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_a30__descriptor) \
    , 0,0, 0,NULL }


/*
 * Message definition for CSI type A31.
 */
struct  _CsiA31
{
  ProtobufCMessage base;
  /*
   * Wideband Channel Quality Indicator.
   */
  size_t n_wb_cqi;
  uint32_t *wb_cqi;
  /*
   * CQI for the M-preffered subband.
   */
  size_t n_sb_cqi;
  MsbCqi **sb_cqi;
  /*
   * Wideband Precoding Matrix Indicator.
   */
  protobuf_c_boolean has_wb_pmi;
  uint32_t wb_pmi;
};
#define CSI_A31__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csi_a31__descriptor) \
    , 0,NULL, 0,NULL, 0,0 }


/*
 * Message definition for CQI for the M-preffered subband.
 */
struct  _MsbCqi
{
  ProtobufCMessage base;
  /*
   * Subband Channel Quality Indicator.
   */
  size_t n_sb_cqi;
  uint32_t *sb_cqi;
};
#define MSB_CQI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msb_cqi__descriptor) \
    , 0,NULL }


/*
 * Message definition for Paging message info.
 */
struct  _PagingInfo
{
  ProtobufCMessage base;
  /*
   * Paging index.
   */
  protobuf_c_boolean has_paging_index;
  uint32_t paging_index;
  /*
   * Paging message size.
   */
  protobuf_c_boolean has_paging_message_size;
  uint32_t paging_message_size;
  /*
   * Paging subframe.
   */
  protobuf_c_boolean has_paging_subframe;
  uint32_t paging_subframe;
  /*
   * Component Carrier (CC) index for the pending paging message.
   */
  protobuf_c_boolean has_cc_index;
  uint32_t cc_index;
};
#define PAGING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&paging_info__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * Message definition for the paging buffer status report.
 */
struct  _PagingBufferReport
{
  ProtobufCMessage base;
  /*
   * Pending paging messages information.
   */
  size_t n_pg_info;
  PagingInfo **pg_info;
};
#define PAGING_BUFFER_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&paging_buffer_report__descriptor) \
    , 0,NULL }


/*
 * Message definition for UL CQI report for a specific UE 
 * for a given report type.
 */
struct  _UlCqi
{
  ProtobufCMessage base;
  /*
   * UL CQI report type.
   */
  protobuf_c_boolean has_type;
  UlCqiType type;
  /*
   * Signal Interference Noise Ratio.
   */
  size_t n_sinr;
  uint32_t *sinr;
  /*
   * Serving Cell Index.
   */
  protobuf_c_boolean has_serv_cell_index;
  uint32_t serv_cell_index;
};
#define UL_CQI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ul_cqi__descriptor) \
    , 0,0, 0,NULL, 0,0 }


/*
 * Message definition for UL (Uplink) CQI report for a specific UE.
 */
struct  _UlCqiReport
{
  ProtobufCMessage base;
  /*
   * Current frame and subframe number.
   * System Frame Number (SFN) * Subframe number.
   */
  protobuf_c_boolean has_sfn_sn;
  uint32_t sfn_sn;
  /*
   * Uplink CQI measurements for requested UL CQI types.
   */
  size_t n_cqi_meas;
  UlCqi **cqi_meas;
};
#define UL_CQI_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ul_cqi_report__descriptor) \
    , 0,0, 0,NULL }


typedef enum {
  L2_STATISTICS_REQUEST__STATS_REQ__NOT_SET = 0,
  L2_STATISTICS_REQUEST__STATS_REQ_CELL_STATS_REQ = 5,
  L2_STATISTICS_REQUEST__STATS_REQ_UE_STATS_REQ = 6,
  L2_STATISTICS_REQUEST__STATS_REQ_COMP_STATS_REQ = 7,
} L2StatisticsRequest__StatsReqCase;

/*
 * Message definition for request of Layer 2 statistics reports.
 */
struct  _L2StatisticsRequest
{
  ProtobufCMessage base;
  /*
   * Type of 3rd level message.
   */
  protobuf_c_boolean has_type;
  L2StatsType type;
  /*
   * Periodicity of statistics reporting.
   */
  protobuf_c_boolean has_report_freq;
  ReportingFrequency report_freq;
  /*
   * Periodicity in terms of number of subframes (1 subframe = 1 ms).
   */
  protobuf_c_boolean has_subframe;
  uint32_t subframe;
  L2StatisticsRequest__StatsReqCase stats_req_case;
  union {
    /*
     * Base station cell related statistics.
     */
    CellStatisticsRequest *cell_stats_req;
    /*
     * UE related statistics.
     */
    UeStatisticsRequest *ue_stats_req;
    /*
     * Contains both cell and UE related statistics.
     */
    CompleteStatisticsRequest *comp_stats_req;
  };
};
#define L2_STATISTICS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&l2_statistics_request__descriptor) \
    , 0,0, 0,0, 0,0, L2_STATISTICS_REQUEST__STATS_REQ__NOT_SET, {0} }


/*
 * Message definition for complete (Cell + UE) Layer 2 statistics request.
 */
struct  _CompleteStatisticsRequest
{
  ProtobufCMessage base;
  /*
   * Types of cell related l2 statistics to include in final report.
   * This field is a bitmask which holds the values in cell_stats_type.
   */
  protobuf_c_boolean has_cell_report_flags;
  uint32_t cell_report_flags;
  /*
   * Types of UE related l2 statistics to include in final report.
   * This field is a bitmask which holds the values in ue_stats_type.
   */
  protobuf_c_boolean has_ue_report_flags;
  uint32_t ue_report_flags;
};
#define COMPLETE_STATISTICS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&complete_statistics_request__descriptor) \
    , 0,0, 0,0 }


/*
 * Message definition for cell related Layer 2 statistics request.
 */
struct  _CellStatisticsRequest
{
  ProtobufCMessage base;
  /*
   * List of CC (Component Carrier) ids for which statistics 
   * needs to be reported.
   */
  size_t n_cc_id;
  uint32_t *cc_id;
  /*
   * Types of cell related l2 statistics to include in final report.
   * This field is a bitmask which holds the values in cell_stats_type.
   */
  protobuf_c_boolean has_report_flags;
  uint32_t report_flags;
};
#define CELL_STATISTICS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cell_statistics_request__descriptor) \
    , 0,NULL, 0,0 }


/*
 * Message definition for UE related Layer 2 statistics request.
 */
struct  _UeStatisticsRequest
{
  ProtobufCMessage base;
  /*
   * List of RNTIs of UEs for which statistics needs to be reported.
   * Radio Network Temporary Identifier (RNTI).
   */
  size_t n_rnti;
  uint32_t *rnti;
  /*
   * Types of UE related l2 statistics to include in final report.
   * This field is a bitmask which holds the values in ue_stats_type.
   */
  protobuf_c_boolean has_report_flags;
  uint32_t report_flags;
};
#define UE_STATISTICS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ue_statistics_request__descriptor) \
    , 0,NULL, 0,0 }


/* Statistics methods */
void   statistics__init
                     (Statistics         *message);
size_t statistics__get_packed_size
                     (const Statistics   *message);
size_t statistics__pack
                     (const Statistics   *message,
                      uint8_t             *out);
size_t statistics__pack_to_buffer
                     (const Statistics   *message,
                      ProtobufCBuffer     *buffer);
Statistics *
       statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   statistics__free_unpacked
                     (Statistics *message,
                      ProtobufCAllocator *allocator);
/* RrcMeasurementsReply methods */
void   rrc_measurements_reply__init
                     (RrcMeasurementsReply         *message);
size_t rrc_measurements_reply__get_packed_size
                     (const RrcMeasurementsReply   *message);
size_t rrc_measurements_reply__pack
                     (const RrcMeasurementsReply   *message,
                      uint8_t             *out);
size_t rrc_measurements_reply__pack_to_buffer
                     (const RrcMeasurementsReply   *message,
                      ProtobufCBuffer     *buffer);
RrcMeasurementsReply *
       rrc_measurements_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rrc_measurements_reply__free_unpacked
                     (RrcMeasurementsReply *message,
                      ProtobufCAllocator *allocator);
/* RrcMeasurements methods */
void   rrc_measurements__init
                     (RrcMeasurements         *message);
size_t rrc_measurements__get_packed_size
                     (const RrcMeasurements   *message);
size_t rrc_measurements__pack
                     (const RrcMeasurements   *message,
                      uint8_t             *out);
size_t rrc_measurements__pack_to_buffer
                     (const RrcMeasurements   *message,
                      ProtobufCBuffer     *buffer);
RrcMeasurements *
       rrc_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rrc_measurements__free_unpacked
                     (RrcMeasurements *message,
                      ProtobufCAllocator *allocator);
/* NeighCellsMeasurements methods */
void   neigh_cells_measurements__init
                     (NeighCellsMeasurements         *message);
size_t neigh_cells_measurements__get_packed_size
                     (const NeighCellsMeasurements   *message);
size_t neigh_cells_measurements__pack
                     (const NeighCellsMeasurements   *message,
                      uint8_t             *out);
size_t neigh_cells_measurements__pack_to_buffer
                     (const NeighCellsMeasurements   *message,
                      ProtobufCBuffer     *buffer);
NeighCellsMeasurements *
       neigh_cells_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   neigh_cells_measurements__free_unpacked
                     (NeighCellsMeasurements *message,
                      ProtobufCAllocator *allocator);
/* EUTRAMeasurements methods */
void   eutra_measurements__init
                     (EUTRAMeasurements         *message);
size_t eutra_measurements__get_packed_size
                     (const EUTRAMeasurements   *message);
size_t eutra_measurements__pack
                     (const EUTRAMeasurements   *message,
                      uint8_t             *out);
size_t eutra_measurements__pack_to_buffer
                     (const EUTRAMeasurements   *message,
                      ProtobufCBuffer     *buffer);
EUTRAMeasurements *
       eutra_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eutra_measurements__free_unpacked
                     (EUTRAMeasurements *message,
                      ProtobufCAllocator *allocator);
/* EUTRACgiMeasurements methods */
void   eutra_cgi_measurements__init
                     (EUTRACgiMeasurements         *message);
size_t eutra_cgi_measurements__get_packed_size
                     (const EUTRACgiMeasurements   *message);
size_t eutra_cgi_measurements__pack
                     (const EUTRACgiMeasurements   *message,
                      uint8_t             *out);
size_t eutra_cgi_measurements__pack_to_buffer
                     (const EUTRACgiMeasurements   *message,
                      ProtobufCBuffer     *buffer);
EUTRACgiMeasurements *
       eutra_cgi_measurements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eutra_cgi_measurements__free_unpacked
                     (EUTRACgiMeasurements *message,
                      ProtobufCAllocator *allocator);
/* PlmnIdentity methods */
void   plmn_identity__init
                     (PlmnIdentity         *message);
size_t plmn_identity__get_packed_size
                     (const PlmnIdentity   *message);
size_t plmn_identity__pack
                     (const PlmnIdentity   *message,
                      uint8_t             *out);
size_t plmn_identity__pack_to_buffer
                     (const PlmnIdentity   *message,
                      ProtobufCBuffer     *buffer);
PlmnIdentity *
       plmn_identity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plmn_identity__free_unpacked
                     (PlmnIdentity *message,
                      ProtobufCAllocator *allocator);
/* CellGlobalIdEUTRA methods */
void   cell_global_id__eutra__init
                     (CellGlobalIdEUTRA         *message);
size_t cell_global_id__eutra__get_packed_size
                     (const CellGlobalIdEUTRA   *message);
size_t cell_global_id__eutra__pack
                     (const CellGlobalIdEUTRA   *message,
                      uint8_t             *out);
size_t cell_global_id__eutra__pack_to_buffer
                     (const CellGlobalIdEUTRA   *message,
                      ProtobufCBuffer     *buffer);
CellGlobalIdEUTRA *
       cell_global_id__eutra__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cell_global_id__eutra__free_unpacked
                     (CellGlobalIdEUTRA *message,
                      ProtobufCAllocator *allocator);
/* EUTRARefSignalMeas methods */
void   eutra_ref_signal_meas__init
                     (EUTRARefSignalMeas         *message);
size_t eutra_ref_signal_meas__get_packed_size
                     (const EUTRARefSignalMeas   *message);
size_t eutra_ref_signal_meas__pack
                     (const EUTRARefSignalMeas   *message,
                      uint8_t             *out);
size_t eutra_ref_signal_meas__pack_to_buffer
                     (const EUTRARefSignalMeas   *message,
                      ProtobufCBuffer     *buffer);
EUTRARefSignalMeas *
       eutra_ref_signal_meas__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eutra_ref_signal_meas__free_unpacked
                     (EUTRARefSignalMeas *message,
                      ProtobufCAllocator *allocator);
/* RrcMeasurementsRequest methods */
void   rrc_measurements_request__init
                     (RrcMeasurementsRequest         *message);
size_t rrc_measurements_request__get_packed_size
                     (const RrcMeasurementsRequest   *message);
size_t rrc_measurements_request__pack
                     (const RrcMeasurementsRequest   *message,
                      uint8_t             *out);
size_t rrc_measurements_request__pack_to_buffer
                     (const RrcMeasurementsRequest   *message,
                      ProtobufCBuffer     *buffer);
RrcMeasurementsRequest *
       rrc_measurements_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rrc_measurements_request__free_unpacked
                     (RrcMeasurementsRequest *message,
                      ProtobufCAllocator *allocator);
/* RrcMeasurementsRequestConfig methods */
void   rrc_measurements_request_config__init
                     (RrcMeasurementsRequestConfig         *message);
size_t rrc_measurements_request_config__get_packed_size
                     (const RrcMeasurementsRequestConfig   *message);
size_t rrc_measurements_request_config__pack
                     (const RrcMeasurementsRequestConfig   *message,
                      uint8_t             *out);
size_t rrc_measurements_request_config__pack_to_buffer
                     (const RrcMeasurementsRequestConfig   *message,
                      ProtobufCBuffer     *buffer);
RrcMeasurementsRequestConfig *
       rrc_measurements_request_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rrc_measurements_request_config__free_unpacked
                     (RrcMeasurementsRequestConfig *message,
                      ProtobufCAllocator *allocator);
/* L2StatisticsReply methods */
void   l2_statistics_reply__init
                     (L2StatisticsReply         *message);
size_t l2_statistics_reply__get_packed_size
                     (const L2StatisticsReply   *message);
size_t l2_statistics_reply__pack
                     (const L2StatisticsReply   *message,
                      uint8_t             *out);
size_t l2_statistics_reply__pack_to_buffer
                     (const L2StatisticsReply   *message,
                      ProtobufCBuffer     *buffer);
L2StatisticsReply *
       l2_statistics_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   l2_statistics_reply__free_unpacked
                     (L2StatisticsReply *message,
                      ProtobufCAllocator *allocator);
/* CellStatisticsReport methods */
void   cell_statistics_report__init
                     (CellStatisticsReport         *message);
size_t cell_statistics_report__get_packed_size
                     (const CellStatisticsReport   *message);
size_t cell_statistics_report__pack
                     (const CellStatisticsReport   *message,
                      uint8_t             *out);
size_t cell_statistics_report__pack_to_buffer
                     (const CellStatisticsReport   *message,
                      ProtobufCBuffer     *buffer);
CellStatisticsReport *
       cell_statistics_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cell_statistics_report__free_unpacked
                     (CellStatisticsReport *message,
                      ProtobufCAllocator *allocator);
/* NoiseInterferenceReport methods */
void   noise_interference_report__init
                     (NoiseInterferenceReport         *message);
size_t noise_interference_report__get_packed_size
                     (const NoiseInterferenceReport   *message);
size_t noise_interference_report__pack
                     (const NoiseInterferenceReport   *message,
                      uint8_t             *out);
size_t noise_interference_report__pack_to_buffer
                     (const NoiseInterferenceReport   *message,
                      ProtobufCBuffer     *buffer);
NoiseInterferenceReport *
       noise_interference_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   noise_interference_report__free_unpacked
                     (NoiseInterferenceReport *message,
                      ProtobufCAllocator *allocator);
/* UeStatisticsReport methods */
void   ue_statistics_report__init
                     (UeStatisticsReport         *message);
size_t ue_statistics_report__get_packed_size
                     (const UeStatisticsReport   *message);
size_t ue_statistics_report__pack
                     (const UeStatisticsReport   *message,
                      uint8_t             *out);
size_t ue_statistics_report__pack_to_buffer
                     (const UeStatisticsReport   *message,
                      ProtobufCBuffer     *buffer);
UeStatisticsReport *
       ue_statistics_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ue_statistics_report__free_unpacked
                     (UeStatisticsReport *message,
                      ProtobufCAllocator *allocator);
/* RlcBsrReport methods */
void   rlc_bsr_report__init
                     (RlcBsrReport         *message);
size_t rlc_bsr_report__get_packed_size
                     (const RlcBsrReport   *message);
size_t rlc_bsr_report__pack
                     (const RlcBsrReport   *message,
                      uint8_t             *out);
size_t rlc_bsr_report__pack_to_buffer
                     (const RlcBsrReport   *message,
                      ProtobufCBuffer     *buffer);
RlcBsrReport *
       rlc_bsr_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rlc_bsr_report__free_unpacked
                     (RlcBsrReport *message,
                      ProtobufCAllocator *allocator);
/* DlCqiReport methods */
void   dl_cqi_report__init
                     (DlCqiReport         *message);
size_t dl_cqi_report__get_packed_size
                     (const DlCqiReport   *message);
size_t dl_cqi_report__pack
                     (const DlCqiReport   *message,
                      uint8_t             *out);
size_t dl_cqi_report__pack_to_buffer
                     (const DlCqiReport   *message,
                      ProtobufCBuffer     *buffer);
DlCqiReport *
       dl_cqi_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dl_cqi_report__free_unpacked
                     (DlCqiReport *message,
                      ProtobufCAllocator *allocator);
/* DlCsiReport methods */
void   dl_csi_report__init
                     (DlCsiReport         *message);
size_t dl_csi_report__get_packed_size
                     (const DlCsiReport   *message);
size_t dl_csi_report__pack
                     (const DlCsiReport   *message,
                      uint8_t             *out);
size_t dl_csi_report__pack_to_buffer
                     (const DlCsiReport   *message,
                      ProtobufCBuffer     *buffer);
DlCsiReport *
       dl_csi_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dl_csi_report__free_unpacked
                     (DlCsiReport *message,
                      ProtobufCAllocator *allocator);
/* CsiP10 methods */
void   csi_p10__init
                     (CsiP10         *message);
size_t csi_p10__get_packed_size
                     (const CsiP10   *message);
size_t csi_p10__pack
                     (const CsiP10   *message,
                      uint8_t             *out);
size_t csi_p10__pack_to_buffer
                     (const CsiP10   *message,
                      ProtobufCBuffer     *buffer);
CsiP10 *
       csi_p10__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_p10__free_unpacked
                     (CsiP10 *message,
                      ProtobufCAllocator *allocator);
/* CsiP11 methods */
void   csi_p11__init
                     (CsiP11         *message);
size_t csi_p11__get_packed_size
                     (const CsiP11   *message);
size_t csi_p11__pack
                     (const CsiP11   *message,
                      uint8_t             *out);
size_t csi_p11__pack_to_buffer
                     (const CsiP11   *message,
                      ProtobufCBuffer     *buffer);
CsiP11 *
       csi_p11__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_p11__free_unpacked
                     (CsiP11 *message,
                      ProtobufCAllocator *allocator);
/* CsiP20 methods */
void   csi_p20__init
                     (CsiP20         *message);
size_t csi_p20__get_packed_size
                     (const CsiP20   *message);
size_t csi_p20__pack
                     (const CsiP20   *message,
                      uint8_t             *out);
size_t csi_p20__pack_to_buffer
                     (const CsiP20   *message,
                      ProtobufCBuffer     *buffer);
CsiP20 *
       csi_p20__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_p20__free_unpacked
                     (CsiP20 *message,
                      ProtobufCAllocator *allocator);
/* CsiP21 methods */
void   csi_p21__init
                     (CsiP21         *message);
size_t csi_p21__get_packed_size
                     (const CsiP21   *message);
size_t csi_p21__pack
                     (const CsiP21   *message,
                      uint8_t             *out);
size_t csi_p21__pack_to_buffer
                     (const CsiP21   *message,
                      ProtobufCBuffer     *buffer);
CsiP21 *
       csi_p21__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_p21__free_unpacked
                     (CsiP21 *message,
                      ProtobufCAllocator *allocator);
/* CsiA12 methods */
void   csi_a12__init
                     (CsiA12         *message);
size_t csi_a12__get_packed_size
                     (const CsiA12   *message);
size_t csi_a12__pack
                     (const CsiA12   *message,
                      uint8_t             *out);
size_t csi_a12__pack_to_buffer
                     (const CsiA12   *message,
                      ProtobufCBuffer     *buffer);
CsiA12 *
       csi_a12__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_a12__free_unpacked
                     (CsiA12 *message,
                      ProtobufCAllocator *allocator);
/* CsiA22 methods */
void   csi_a22__init
                     (CsiA22         *message);
size_t csi_a22__get_packed_size
                     (const CsiA22   *message);
size_t csi_a22__pack
                     (const CsiA22   *message,
                      uint8_t             *out);
size_t csi_a22__pack_to_buffer
                     (const CsiA22   *message,
                      ProtobufCBuffer     *buffer);
CsiA22 *
       csi_a22__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_a22__free_unpacked
                     (CsiA22 *message,
                      ProtobufCAllocator *allocator);
/* CsiA20 methods */
void   csi_a20__init
                     (CsiA20         *message);
size_t csi_a20__get_packed_size
                     (const CsiA20   *message);
size_t csi_a20__pack
                     (const CsiA20   *message,
                      uint8_t             *out);
size_t csi_a20__pack_to_buffer
                     (const CsiA20   *message,
                      ProtobufCBuffer     *buffer);
CsiA20 *
       csi_a20__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_a20__free_unpacked
                     (CsiA20 *message,
                      ProtobufCAllocator *allocator);
/* CsiA30 methods */
void   csi_a30__init
                     (CsiA30         *message);
size_t csi_a30__get_packed_size
                     (const CsiA30   *message);
size_t csi_a30__pack
                     (const CsiA30   *message,
                      uint8_t             *out);
size_t csi_a30__pack_to_buffer
                     (const CsiA30   *message,
                      ProtobufCBuffer     *buffer);
CsiA30 *
       csi_a30__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_a30__free_unpacked
                     (CsiA30 *message,
                      ProtobufCAllocator *allocator);
/* CsiA31 methods */
void   csi_a31__init
                     (CsiA31         *message);
size_t csi_a31__get_packed_size
                     (const CsiA31   *message);
size_t csi_a31__pack
                     (const CsiA31   *message,
                      uint8_t             *out);
size_t csi_a31__pack_to_buffer
                     (const CsiA31   *message,
                      ProtobufCBuffer     *buffer);
CsiA31 *
       csi_a31__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csi_a31__free_unpacked
                     (CsiA31 *message,
                      ProtobufCAllocator *allocator);
/* MsbCqi methods */
void   msb_cqi__init
                     (MsbCqi         *message);
size_t msb_cqi__get_packed_size
                     (const MsbCqi   *message);
size_t msb_cqi__pack
                     (const MsbCqi   *message,
                      uint8_t             *out);
size_t msb_cqi__pack_to_buffer
                     (const MsbCqi   *message,
                      ProtobufCBuffer     *buffer);
MsbCqi *
       msb_cqi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msb_cqi__free_unpacked
                     (MsbCqi *message,
                      ProtobufCAllocator *allocator);
/* PagingInfo methods */
void   paging_info__init
                     (PagingInfo         *message);
size_t paging_info__get_packed_size
                     (const PagingInfo   *message);
size_t paging_info__pack
                     (const PagingInfo   *message,
                      uint8_t             *out);
size_t paging_info__pack_to_buffer
                     (const PagingInfo   *message,
                      ProtobufCBuffer     *buffer);
PagingInfo *
       paging_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   paging_info__free_unpacked
                     (PagingInfo *message,
                      ProtobufCAllocator *allocator);
/* PagingBufferReport methods */
void   paging_buffer_report__init
                     (PagingBufferReport         *message);
size_t paging_buffer_report__get_packed_size
                     (const PagingBufferReport   *message);
size_t paging_buffer_report__pack
                     (const PagingBufferReport   *message,
                      uint8_t             *out);
size_t paging_buffer_report__pack_to_buffer
                     (const PagingBufferReport   *message,
                      ProtobufCBuffer     *buffer);
PagingBufferReport *
       paging_buffer_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   paging_buffer_report__free_unpacked
                     (PagingBufferReport *message,
                      ProtobufCAllocator *allocator);
/* UlCqi methods */
void   ul_cqi__init
                     (UlCqi         *message);
size_t ul_cqi__get_packed_size
                     (const UlCqi   *message);
size_t ul_cqi__pack
                     (const UlCqi   *message,
                      uint8_t             *out);
size_t ul_cqi__pack_to_buffer
                     (const UlCqi   *message,
                      ProtobufCBuffer     *buffer);
UlCqi *
       ul_cqi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ul_cqi__free_unpacked
                     (UlCqi *message,
                      ProtobufCAllocator *allocator);
/* UlCqiReport methods */
void   ul_cqi_report__init
                     (UlCqiReport         *message);
size_t ul_cqi_report__get_packed_size
                     (const UlCqiReport   *message);
size_t ul_cqi_report__pack
                     (const UlCqiReport   *message,
                      uint8_t             *out);
size_t ul_cqi_report__pack_to_buffer
                     (const UlCqiReport   *message,
                      ProtobufCBuffer     *buffer);
UlCqiReport *
       ul_cqi_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ul_cqi_report__free_unpacked
                     (UlCqiReport *message,
                      ProtobufCAllocator *allocator);
/* L2StatisticsRequest methods */
void   l2_statistics_request__init
                     (L2StatisticsRequest         *message);
size_t l2_statistics_request__get_packed_size
                     (const L2StatisticsRequest   *message);
size_t l2_statistics_request__pack
                     (const L2StatisticsRequest   *message,
                      uint8_t             *out);
size_t l2_statistics_request__pack_to_buffer
                     (const L2StatisticsRequest   *message,
                      ProtobufCBuffer     *buffer);
L2StatisticsRequest *
       l2_statistics_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   l2_statistics_request__free_unpacked
                     (L2StatisticsRequest *message,
                      ProtobufCAllocator *allocator);
/* CompleteStatisticsRequest methods */
void   complete_statistics_request__init
                     (CompleteStatisticsRequest         *message);
size_t complete_statistics_request__get_packed_size
                     (const CompleteStatisticsRequest   *message);
size_t complete_statistics_request__pack
                     (const CompleteStatisticsRequest   *message,
                      uint8_t             *out);
size_t complete_statistics_request__pack_to_buffer
                     (const CompleteStatisticsRequest   *message,
                      ProtobufCBuffer     *buffer);
CompleteStatisticsRequest *
       complete_statistics_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   complete_statistics_request__free_unpacked
                     (CompleteStatisticsRequest *message,
                      ProtobufCAllocator *allocator);
/* CellStatisticsRequest methods */
void   cell_statistics_request__init
                     (CellStatisticsRequest         *message);
size_t cell_statistics_request__get_packed_size
                     (const CellStatisticsRequest   *message);
size_t cell_statistics_request__pack
                     (const CellStatisticsRequest   *message,
                      uint8_t             *out);
size_t cell_statistics_request__pack_to_buffer
                     (const CellStatisticsRequest   *message,
                      ProtobufCBuffer     *buffer);
CellStatisticsRequest *
       cell_statistics_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cell_statistics_request__free_unpacked
                     (CellStatisticsRequest *message,
                      ProtobufCAllocator *allocator);
/* UeStatisticsRequest methods */
void   ue_statistics_request__init
                     (UeStatisticsRequest         *message);
size_t ue_statistics_request__get_packed_size
                     (const UeStatisticsRequest   *message);
size_t ue_statistics_request__pack
                     (const UeStatisticsRequest   *message,
                      uint8_t             *out);
size_t ue_statistics_request__pack_to_buffer
                     (const UeStatisticsRequest   *message,
                      ProtobufCBuffer     *buffer);
UeStatisticsRequest *
       ue_statistics_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ue_statistics_request__free_unpacked
                     (UeStatisticsRequest *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Statistics_Closure)
                 (const Statistics *message,
                  void *closure_data);
typedef void (*RrcMeasurementsReply_Closure)
                 (const RrcMeasurementsReply *message,
                  void *closure_data);
typedef void (*RrcMeasurements_Closure)
                 (const RrcMeasurements *message,
                  void *closure_data);
typedef void (*NeighCellsMeasurements_Closure)
                 (const NeighCellsMeasurements *message,
                  void *closure_data);
typedef void (*EUTRAMeasurements_Closure)
                 (const EUTRAMeasurements *message,
                  void *closure_data);
typedef void (*EUTRACgiMeasurements_Closure)
                 (const EUTRACgiMeasurements *message,
                  void *closure_data);
typedef void (*PlmnIdentity_Closure)
                 (const PlmnIdentity *message,
                  void *closure_data);
typedef void (*CellGlobalIdEUTRA_Closure)
                 (const CellGlobalIdEUTRA *message,
                  void *closure_data);
typedef void (*EUTRARefSignalMeas_Closure)
                 (const EUTRARefSignalMeas *message,
                  void *closure_data);
typedef void (*RrcMeasurementsRequest_Closure)
                 (const RrcMeasurementsRequest *message,
                  void *closure_data);
typedef void (*RrcMeasurementsRequestConfig_Closure)
                 (const RrcMeasurementsRequestConfig *message,
                  void *closure_data);
typedef void (*L2StatisticsReply_Closure)
                 (const L2StatisticsReply *message,
                  void *closure_data);
typedef void (*CellStatisticsReport_Closure)
                 (const CellStatisticsReport *message,
                  void *closure_data);
typedef void (*NoiseInterferenceReport_Closure)
                 (const NoiseInterferenceReport *message,
                  void *closure_data);
typedef void (*UeStatisticsReport_Closure)
                 (const UeStatisticsReport *message,
                  void *closure_data);
typedef void (*RlcBsrReport_Closure)
                 (const RlcBsrReport *message,
                  void *closure_data);
typedef void (*DlCqiReport_Closure)
                 (const DlCqiReport *message,
                  void *closure_data);
typedef void (*DlCsiReport_Closure)
                 (const DlCsiReport *message,
                  void *closure_data);
typedef void (*CsiP10_Closure)
                 (const CsiP10 *message,
                  void *closure_data);
typedef void (*CsiP11_Closure)
                 (const CsiP11 *message,
                  void *closure_data);
typedef void (*CsiP20_Closure)
                 (const CsiP20 *message,
                  void *closure_data);
typedef void (*CsiP21_Closure)
                 (const CsiP21 *message,
                  void *closure_data);
typedef void (*CsiA12_Closure)
                 (const CsiA12 *message,
                  void *closure_data);
typedef void (*CsiA22_Closure)
                 (const CsiA22 *message,
                  void *closure_data);
typedef void (*CsiA20_Closure)
                 (const CsiA20 *message,
                  void *closure_data);
typedef void (*CsiA30_Closure)
                 (const CsiA30 *message,
                  void *closure_data);
typedef void (*CsiA31_Closure)
                 (const CsiA31 *message,
                  void *closure_data);
typedef void (*MsbCqi_Closure)
                 (const MsbCqi *message,
                  void *closure_data);
typedef void (*PagingInfo_Closure)
                 (const PagingInfo *message,
                  void *closure_data);
typedef void (*PagingBufferReport_Closure)
                 (const PagingBufferReport *message,
                  void *closure_data);
typedef void (*UlCqi_Closure)
                 (const UlCqi *message,
                  void *closure_data);
typedef void (*UlCqiReport_Closure)
                 (const UlCqiReport *message,
                  void *closure_data);
typedef void (*L2StatisticsRequest_Closure)
                 (const L2StatisticsRequest *message,
                  void *closure_data);
typedef void (*CompleteStatisticsRequest_Closure)
                 (const CompleteStatisticsRequest *message,
                  void *closure_data);
typedef void (*CellStatisticsRequest_Closure)
                 (const CellStatisticsRequest *message,
                  void *closure_data);
typedef void (*UeStatisticsRequest_Closure)
                 (const UeStatisticsRequest *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    stats_msg_type__descriptor;
extern const ProtobufCEnumDescriptor    mac_ce_type__descriptor;
extern const ProtobufCEnumDescriptor    ul_cqi_type__descriptor;
extern const ProtobufCEnumDescriptor    csi_type__descriptor;
extern const ProtobufCEnumDescriptor    l2_stats_type__descriptor;
extern const ProtobufCEnumDescriptor    reporting_frequency__descriptor;
extern const ProtobufCEnumDescriptor    cell_stats_type__descriptor;
extern const ProtobufCEnumDescriptor    ue_stats_type__descriptor;
extern const ProtobufCMessageDescriptor statistics__descriptor;
extern const ProtobufCMessageDescriptor rrc_measurements_reply__descriptor;
extern const ProtobufCMessageDescriptor rrc_measurements__descriptor;
extern const ProtobufCMessageDescriptor neigh_cells_measurements__descriptor;
extern const ProtobufCMessageDescriptor eutra_measurements__descriptor;
extern const ProtobufCMessageDescriptor eutra_cgi_measurements__descriptor;
extern const ProtobufCMessageDescriptor plmn_identity__descriptor;
extern const ProtobufCMessageDescriptor cell_global_id__eutra__descriptor;
extern const ProtobufCMessageDescriptor eutra_ref_signal_meas__descriptor;
extern const ProtobufCMessageDescriptor rrc_measurements_request__descriptor;
extern const ProtobufCMessageDescriptor rrc_measurements_request_config__descriptor;
extern const ProtobufCMessageDescriptor l2_statistics_reply__descriptor;
extern const ProtobufCMessageDescriptor cell_statistics_report__descriptor;
extern const ProtobufCMessageDescriptor noise_interference_report__descriptor;
extern const ProtobufCMessageDescriptor ue_statistics_report__descriptor;
extern const ProtobufCMessageDescriptor rlc_bsr_report__descriptor;
extern const ProtobufCMessageDescriptor dl_cqi_report__descriptor;
extern const ProtobufCMessageDescriptor dl_csi_report__descriptor;
extern const ProtobufCMessageDescriptor csi_p10__descriptor;
extern const ProtobufCMessageDescriptor csi_p11__descriptor;
extern const ProtobufCMessageDescriptor csi_p20__descriptor;
extern const ProtobufCMessageDescriptor csi_p21__descriptor;
extern const ProtobufCMessageDescriptor csi_a12__descriptor;
extern const ProtobufCMessageDescriptor csi_a22__descriptor;
extern const ProtobufCMessageDescriptor csi_a20__descriptor;
extern const ProtobufCMessageDescriptor csi_a30__descriptor;
extern const ProtobufCMessageDescriptor csi_a31__descriptor;
extern const ProtobufCMessageDescriptor msb_cqi__descriptor;
extern const ProtobufCMessageDescriptor paging_info__descriptor;
extern const ProtobufCMessageDescriptor paging_buffer_report__descriptor;
extern const ProtobufCMessageDescriptor ul_cqi__descriptor;
extern const ProtobufCMessageDescriptor ul_cqi_report__descriptor;
extern const ProtobufCMessageDescriptor l2_statistics_request__descriptor;
extern const ProtobufCMessageDescriptor complete_statistics_request__descriptor;
extern const ProtobufCMessageDescriptor cell_statistics_request__descriptor;
extern const ProtobufCMessageDescriptor ue_statistics_request__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_statistics_2eproto__INCLUDED */
