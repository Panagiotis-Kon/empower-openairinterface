/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: main.proto */

#ifndef PROTOBUF_C_main_2eproto__INCLUDED
#define PROTOBUF_C_main_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "hello.pb-c.h"
#include "statistics.pb-c.h"
#include "configs.pb-c.h"

typedef struct _Header Header;
typedef struct _EmageMsg EmageMsg;


/* --- enums --- */

/*
 * Type of recognized messages.
 */
typedef enum _MsgType {
  /*
   * Invalid message; not computed by default.  
   */
  MSG_TYPE__INVALID = 0,
  /*
   * Hello request message.
   */
  MSG_TYPE__HELLO_REQ = 1,
  /*
   * Hello reply message.
   */
  MSG_TYPE__HELLO_REP = 2,
  /*
   * Statistics request message.
   */
  MSG_TYPE__STATS_REQ = 3,
  /*
   * Statistics reply message.
   */
  MSG_TYPE__STATS_REP = 4,
  /*
   * Configuration request message.
   */
  MSG_TYPE__CONF_REQ = 5,
  /*
   * Configuration reply message.
   */
  MSG_TYPE__CONF_REP = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG_TYPE)
} MsgType;

/* --- messages --- */

/*
 * Common head to identify the operation.
 */
struct  _Header
{
  ProtobufCMessage base;
  /*
   * Type of 1st level message. 
   */
  protobuf_c_boolean has_type;
  MsgType type;
  /*
   * Version of 1st level message.
   */
  protobuf_c_boolean has_vers;
  uint32_t vers;
  /*
   * Base station identifier.
   */
  protobuf_c_boolean has_b_id;
  uint32_t b_id;
  /*
   * Module identifier (Used in Virtualized RAN concepts and OAI).
   */
  protobuf_c_boolean has_m_id;
  uint32_t m_id;
  /*
   * Sequence number.
   */
  protobuf_c_boolean has_seq;
  uint32_t seq;
  /*
   * Transaction identifier.
   */
  protobuf_c_boolean has_t_id;
  uint32_t t_id;
};
#define HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&header__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


typedef enum {
  EMAGE_MSG__MESSAGE__NOT_SET = 0,
  EMAGE_MSG__MESSAGE_M_HELLO = 2,
  EMAGE_MSG__MESSAGE_M_STATS = 3,
  EMAGE_MSG__MESSAGE_M_CONFS = 4,
} EmageMsg__MessageCase;

/*
 * Master message sent by the agent system.
 */
struct  _EmageMsg
{
  ProtobufCMessage base;
  /*
   * Header for every message. 
   */
  Header *head;
  EmageMsg__MessageCase message_case;
  union {
    Hello *mhello;
    Statistics *mstats;
    Configs *mconfs;
  };
};
#define EMAGE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&emage_msg__descriptor) \
    , NULL, EMAGE_MSG__MESSAGE__NOT_SET, {0} }


/* Header methods */
void   header__init
                     (Header         *message);
size_t header__get_packed_size
                     (const Header   *message);
size_t header__pack
                     (const Header   *message,
                      uint8_t             *out);
size_t header__pack_to_buffer
                     (const Header   *message,
                      ProtobufCBuffer     *buffer);
Header *
       header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   header__free_unpacked
                     (Header *message,
                      ProtobufCAllocator *allocator);
/* EmageMsg methods */
void   emage_msg__init
                     (EmageMsg         *message);
size_t emage_msg__get_packed_size
                     (const EmageMsg   *message);
size_t emage_msg__pack
                     (const EmageMsg   *message,
                      uint8_t             *out);
size_t emage_msg__pack_to_buffer
                     (const EmageMsg   *message,
                      ProtobufCBuffer     *buffer);
EmageMsg *
       emage_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   emage_msg__free_unpacked
                     (EmageMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Header_Closure)
                 (const Header *message,
                  void *closure_data);
typedef void (*EmageMsg_Closure)
                 (const EmageMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    msg_type__descriptor;
extern const ProtobufCMessageDescriptor header__descriptor;
extern const ProtobufCMessageDescriptor emage_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_main_2eproto__INCLUDED */
