/* Copyright (c) 2016 Kewin Rausch <kewin.rausch@create-net.org>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 */

/*
 * Empower Agent.
 */

#ifndef __EMAGE_H
#define __EMAGE_H

/* Emage message generated by protocol buffers. */
typedef struct _EmageMsg EmageMsg;

/* Defines the operations that can be customized depending on the technology
 * where you want to embed the agent to. Such procedures will be called by the
 * agent main logic while responding to the controller orders of event triggered
 * by the local system.
 */
struct em_agent_ops {
	/* Perform custom initialization for the technology abstraction layer.
	 * 
	 * Returns 0 on success, a negative error code otherwise.
	 */
	int (* init) (void);

	/* Perform custom initialization for the technology abstraction layer.
	*
	* Returns 0 on success, a negative error code otherwise.
	*/
	int (* release) (void);

	/*
	 * 
	 */

	/* Request to collect some statistics from layer 2 that would be sent to
	 * the controller.
	 *
	 * Returns 0 on success, a negative error code otherwise.
	 */
	int (* L2_stat_reply) (
		/* Request received by the controller. */
		EmageMsg * request,
		/* Reply to send to the controller. */
		EmageMsg ** reply);
	
	/* Request to collect UE configuration which would be sent to
	 * the controller.
	 *
	 * Returns 0 on success, a negative error code otherwise.
	 */
	int (* UE_config_reply) (
		/* Request received by the controller. */
		EmageMsg * request,
		/* Reply to send to the controller. */
		EmageMsg ** reply);
	
	/* Request to collect eNB configuration which would be sent to
	 * the controller.
	 *
	 * Returns 0 on success, a negative error code otherwise.
	 */
	int (* eNB_config_reply) (
		/* Request received by the controller. */
		EmageMsg * request,
		/* Reply to send to the controller. */
		EmageMsg ** reply);
};

/* Start the Empower Agent logic. This will cause the agent to start interacting
 * with a remote controller or to local events. Yuo need to pass the technology
 * dependant callbacks and the base station identifier.
 *
 * Returns 0 on success, or a negative error code on failure.
 */
int em_start(struct em_agent_ops * ops, int b_id);

/* Stop the Empower Agent logic. This will cause the agent to stop to all the
 * controller commands and local events.
 *
 * Returns 0 on success, or a negative error code on failure.
 */
int em_stop(void);

#endif
